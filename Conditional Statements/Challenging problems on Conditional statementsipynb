{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a7151817-8f18-4b54-b207-5de53cc1fe5d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Traffic SignaL pr0blem\n",
    "\n",
    "x = input(\"Enter your colour : \")\n",
    "\n",
    "if x == \"red\":\n",
    "    print(\"Stop..\")\n",
    "elif x == \"yellow\":\n",
    "    print(\"Go Slowly\")\n",
    "elif x== \"green\":\n",
    "    print(\"You can go...\")\n",
    "else:\n",
    "    print(\"Enter the right colour\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d376972b-b921-451f-8a40-e1081436064d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Temperture problem\n",
    "\n",
    "x = int(input(\"enter the temperature : \"))\n",
    "\n",
    "if x >=10  and x<= 20:\n",
    "    print(\"The temperature is cold\")\n",
    "elif x>= 20 and x<= 30:\n",
    "    print(\"The temperature is Warm\")\n",
    "elif x>=30 and x<=50:\n",
    "    print(\"The temperature is Hot\")\n",
    "else:\n",
    "    (\"The temperature is very High\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ffabde91-1541-4962-af14-3ad35e640e5d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# . Climate Control System:\n",
    "#    - You are designing a climate control system for a greenhouse. The system needs to:\n",
    "#      - Turn on the heater if the temperature is below 18°C.\n",
    "#      - Turn on the fan if the temperature is between 18°C and 24°C.\n",
    "#      - Open the vents if the temperature is above 24°\n",
    "\n",
    "temperature = 22  # Example temperature\n",
    "\n",
    "if temperature < 18:\n",
    "    climate_control = \"Turn on the heater\"\n",
    "elif 18 <= temperature <= 24:\n",
    "    climate_control = \"Turn on the fan\"\n",
    "else:\n",
    "    climate_control = \"Open the vents\"\n",
    "\n",
    "print(climate_control)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f6daa09b-dab2-4c6f-805d-ab89a5cfa8f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 2. Banking Fraud Detection:\n",
    "#    - You are developing a system to detect fraudulent transactions based on transaction amount and frequency.\n",
    "#      - Flag the transaction as \"Low Risk\" if the amount is less than $500.\n",
    "#      - Flag the transaction as \"Medium Risk\" if the amount is between $500 and $2000.\n",
    "#      - Flag the transaction as \"High Risk\" if the amount is over $2000.y = int(input(\"Enter the transaction amount : \"))\n",
    "\n",
    "transaction_amount = 1500  # Example transaction amount\n",
    "\n",
    "if transaction_amount < 500:\n",
    "    risk = \"Low Risk\"\n",
    "elif 500 <= transaction_amount <= 2000:\n",
    "    risk = \"Medium Risk\"\n",
    "else:\n",
    "    risk = \"High Risk\"\n",
    "\n",
    "print(risk)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "28100262-a2cc-4abf-88be-a101eeb04eff",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 3. E-commerce Discount Application:\n",
    "#    - You are implementing a discount system for an e-commerce website.\n",
    "#      - Apply a 10% discount if the purchase amount is between $50 and $100.\n",
    "#      - Apply a 20% discount if the purchase amount is between $101 and $500.\n",
    "#      - Apply a 30% discount if the purchase amount is above $500.\n",
    "\n",
    "purchase_amount = 350  # Example purchase amount\n",
    "\n",
    "if 50 <= purchase_amount <= 100:\n",
    "    discount = 0.10\n",
    "elif 101 <= purchase_amount <= 500:\n",
    "    discount = 0.20\n",
    "elif purchase_amount > 500:\n",
    "    discount = 0.30\n",
    "else:\n",
    "    discount = 0.0\n",
    "\n",
    "discounted_price = purchase_amount * (1 - discount)\n",
    "print(f\"Discount: {discount * 100}%, Discounted Price: ${discounted_price:.2f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f16cd37d-5efc-4b0d-b824-ffcc3265041d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 4. Shipping Cost Calculator:\n",
    "#    - You need to calculate the shipping cost based on the weight of the package.\n",
    "#      - Charge $5 if the package weighs less than 2 kg.\n",
    "#      - Charge $10 if the package weighs between 2 kg and 5 kg.\n",
    "#      - Charge $20 if the package weighs more than 5 kg.\n",
    "\n",
    "weight = 3.5  # Example package weight in kg\n",
    "\n",
    "if weight < 2:\n",
    "    shipping_cost = 5\n",
    "elif 2 <= weight <= 5:\n",
    "    shipping_cost = 10\n",
    "else:\n",
    "    shipping_cost = 20\n",
    "\n",
    "print(f\"Shipping Cost: ${shipping_cost}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a0cd0f62-7561-457b-bbbb-5d01499b6ce3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 5. Student Grade Classification:\n",
    "#    - You are writing a program to classify students based on their scores.\n",
    "#      - Classify as \"Fail\" if the score is below 50.\n",
    "#      - Classify as \"Pass\" if the score is between 50 and 65.\n",
    "#      - Classify as \"Merit\" if the score is between 66 and 80.\n",
    "#      - Classify as \"Distinction\" if the score is above 80.\n",
    "\n",
    "score = 75  # Example score\n",
    "\n",
    "if score < 50:\n",
    "    classification = \"Fail\"\n",
    "elif 50 <= score <= 65:\n",
    "    classification = \"Pass\"\n",
    "elif 66 <= score <= 80:\n",
    "    classification = \"Merit\"\n",
    "else:\n",
    "    classification = \"Distinction\"\n",
    "\n",
    "print(classification)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d09d3a06-b1f6-436e-9def-9d1f9bb09c80",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 6. Traffic Light Control System:\n",
    "#    - Design a control system for traffic lights based on the time of the day.\n",
    "#      - Set the light to \"Green\" during peak hours (7-9 AM and 4-6 PM).\n",
    "#      - Set the light to \"Yellow\" during non-peak hours (9 AM-4 PM and 6-10 PM).\n",
    "#      - Set the light to \"Red\" during night hours (10 PM-7 AM).\n",
    "\n",
    "x = int(input(\"Enter the time in 24-hour format: \"))\n",
    "\n",
    "if 7 <= x <= 9 or 16 <= x <= 18:\n",
    "    print(\"Set the light to Green\")\n",
    "elif 9 <= x <= 4 or 18 <= x <= 22:\n",
    "    print(\"Set the light to Yellow\")\n",
    "else:\n",
    "    print(\"Set the light to Red\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9e5231b6-a97c-45ff-8806-691a6d2ae171",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 7. Movie Ticket Pricing:\n",
    "#    - You are creating a ticket pricing system for a movie theater.\n",
    "#      - Charge $8 for children (under 12 years old).\n",
    "#      - Charge $12 for adults (between 12 and 60 years old).\n",
    "#      - Charge $10 for seniors (over 60 years old).\n",
    "\n",
    "\n",
    "x = int(input(\"Enter the age : \"))\n",
    "\n",
    "if x < 12:\n",
    "    print(\"He is Children so Charge $8\")\n",
    "elif x >=12 and x<=60:\n",
    "    print(\"He is Adult so Charge $12\")\n",
    "elif x > 60:\n",
    "    print(\"He is Senior so Charge $10\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a187e98f-fe51-480e-8a38-fc1130ba4ff5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 8. Water Quality Monitoring:\n",
    "#    - Implement a water quality monitoring system that checks pH levels.\n",
    "#      - Indicate \"Acidic\" if pH is less than 6.5.\n",
    "#      - Indicate \"Neutral\" if pH is between 6.5 and 7.5.\n",
    "#      - Indicate \"Basic\" if pH is above 7.5.\n",
    "\n",
    "x = float(input(\"Enter the pH Value : \"))\n",
    "\n",
    "if x < 6.5:\n",
    "    print(\"pH is Acidic\")\n",
    "elif x>=6.5 and x<=7.5:\n",
    "    print(\"pH is Neutral\")\n",
    "elif x>7.5:\n",
    "    print(\"pH is Basic\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0e8a88c7-4a43-4b25-8fc5-5679354475b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 9. Fitness Tracker:\n",
    "#    - You are developing a fitness tracker that categorizes the intensity of a workout based on heart rate.\n",
    "#      - Categorize as \"Low Intensity\" if heart rate is below 100 bpm.\n",
    "#      - Categorize as \"Moderate Intensity\" if heart rate is between 100 bpm and 140 bpm.\n",
    "#      - Categorize as \"High Intensity\" if heart rate is above 140 bpm.\n",
    "\n",
    "\n",
    "x = int(input(\"Enter heart rate in bpm : \"))\n",
    "\n",
    "if x < 100:\n",
    "    print(\"your Heart rate has Low Intensity\")\n",
    "elif x >=100 and x<= 140:\n",
    "    print(\"your Heart rate has moderate intensity\")\n",
    "elif x > 140:\n",
    "    print(\"your Heart rate has High intensity\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c7be1e2a-1229-42e7-8baf-63d996840786",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 10. Retail Store Inventory Management:\n",
    "#     - Create an inventory management system that categorizes products based on stock levels.\n",
    "#       - Categorize as \"Out of Stock\" if quantity is 0.\n",
    "#       - Categorize as \"Low Stock\" if quantity is between 1 and 20.\n",
    "#       - Categorize as \"In Stock\" if quantity is between 21 and 100.\n",
    "#       - Categorize as \"Overstocked\" if quantity is above 100.\n",
    "\n",
    "x = int(input(\"Enter the quantity of stock : \"))\n",
    "\n",
    "if x == 0:\n",
    "    print(\"Out of stock\")\n",
    "elif x >= 1 and x<=20:\n",
    "    print(\"Low Stock\")\n",
    "elif x>=21 and x<=100:\n",
    "    print(\"In stock\")\n",
    "elif x>100:\n",
    "    print(\"Overstocked\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
